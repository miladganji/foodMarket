// <auto-generated />
using System;
using Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Events.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EntityName");

                    b.Property<bool>("Issucces");

                    b.Property<string>("actionName");

                    b.Property<DateTime>("date");

                    b.Property<string>("jsonRequest");

                    b.Property<string>("jsonResponse");

                    b.HasKey("Id");

                    b.ToTable("events");
                });

            modelBuilder.Entity("Domain.Order.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<Guid>("OrderNumber");

                    b.Property<int>("OrderState");

                    b.Property<double>("Tax");

                    b.Property<double>("TotalPrice");

                    b.Property<Guid?>("UserId");

                    b.Property<double>("totalAmount");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("tblOrder");
                });

            modelBuilder.Entity("Domain.Order.OrderLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("OrderId");

                    b.Property<int>("Qty");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("tblOrderLine");
                });

            modelBuilder.Entity("Domain.User.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("FirsName")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(600);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(300)
                        .IsUnicode(true);

                    b.Property<int>("state");

                    b.HasKey("Id");

                    b.HasIndex("Mobile")
                        .IsUnique();

                    b.ToTable("tblUser");
                });

            modelBuilder.Entity("Domain.Order.Order", b =>
                {
                    b.HasOne("Domain.User.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Order.OrderLine", b =>
                {
                    b.HasOne("Domain.Order.Order")
                        .WithMany("OrderLine")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.Food.Food", "Food", b1 =>
                        {
                            b1.Property<Guid>("Id");

                            b1.Property<string>("FoodName")
                                .IsRequired()
                                .HasMaxLength(200);

                            b1.Property<bool>("IsExist");

                            b1.Property<int>("foodType");

                            b1.Property<int>("state");

                            b1.HasIndex("FoodName")
                                .IsUnique();

                            b1.ToTable("tblOrderLine");

                            b1.HasOne("Domain.Order.OrderLine")
                                .WithOne("Food")
                                .HasForeignKey("Domain.Food.Food", "Id")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Domain.Values.Price.Price", "price", b2 =>
                                {
                                    b2.Property<Guid>("FoodId");

                                    b2.Property<decimal>("val");

                                    b2.ToTable("tblOrderLine");

                                    b2.HasOne("Domain.Food.Food")
                                        .WithOne("price")
                                        .HasForeignKey("Domain.Values.Price.Price", "FoodId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
